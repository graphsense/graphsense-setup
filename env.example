# This is the config file for graphsense-compose project. The goal is to allow an out-of-the-box yet customisable setup of all required graphsense services.
# Because of that, this config contains parameters from all graphsense services.
# To spin up a set of graphsense services, one should:
#  - Modify the docker-compose.yml file also supplied in this repo to only keep services that are required.
#  - cp env.example .env
#  - Fill in all parameters in .env file. Parameters related to services removed from docker-compose.yml can be omitted.
# 
# !!! Make sure the parent directory of this project has all the required graphsense services git-cloned in their correct directories, or docker-compose's extend won't find those !!!


## Important:
# Relative paths specified in this file will be resolved starting from the root directory of the docker composition where the parameter is used and not from the folder docker-compose is run from.
# As a result, if CASSANDRA_DATADIR is set to ./cassandra_data, then the resolved path is going to be (starting from this directory) ../cassandra/cassandra_data.
# If you would like to store the data in this directory, either:
# - Use absolute paths, or
# - Prepend relative paths with ../graphsense-setup/


###   Blocksci - general   ###
# Which config file to use
CONFIG_FILE=/var/data/blocksci_data/btc.cfg

# Blocksci data directory for storing raw blockchain before importing it to cassandra. 
# Mounted at /var/data/blocksci_data/ inside the exporter container.
BLOCKSCI_DATADIR=./blocksci_data

###   Blocksci - parser   ###
# Local (host) directory of a btc p2p client. Parser takes blocks from here and puts them into blocksci datadir.
# Mounted at /var/data/block_data/ inside the parser container.
BLOCK_DATADIR=

### Blocksci - exporter ###
# Raw cassandra keyspace - exporter will put raw blockchain data here
RAW_KEYSPACE=btc_raw

# Block range to export to cassandra
FROM_BLOCK=0
TO_BLOCK=200000

# Number of processes to use when exporting raw blockchain data from blocksci_datadir to cassandra
PROCESSES=24

###   Cassandra   ###
# Host of the cassandra database. The docker containers are connected to the same docker network, so cassandra can be reached via a hostname.
CASSANDRA_HOST=cassandra
CASSANDRA_DATADIR=./cassandra_data


###   Transformation   ###

# Spark cache directory. Will require a lot of space while the pipeline is running!
SPARK_DATASTORE=./spark_config

# TCP port where the spark frontend will listen. Contains useful info about pipeline progress and used resources. 
SPARK_FRONTEND_PORT=4040

BUCKET_SIZE=25000

# Cassandra keyspaces:
# keyspace to put transformed data to
TARGET_KEYSPACE=btc_transformed

# keyspace containing tag information
TAG_KEYSPACE=tagpacks


###   Graphsense REST   ###

# number of gunicorn worker processes
NUM_WORKERS=3
# Flask secret key. Execute ./rest/gen_secret_key.sh to fill in this field
SECRET_KEY=FLASK_SECRET_KEY

# TCP port where the rest service is going to be listening.
REST_PORT=9000

# How many days should pass before a login session expires
REST_ACCESS_TOKEN_EXPIRES_DAYS=1


###   Graphsense Dashboard   ###

# Where to reach the GraphSense REST API. Should probably be set to localhost:9000
REST_ENDPOINT=http://localhost:9000

# Which port to serve the dashboard on.
DASHBOARD_PORT=8000

# Webservice for report generation (optional)
TITANIUM_REPORT_GENERATION_URL=


